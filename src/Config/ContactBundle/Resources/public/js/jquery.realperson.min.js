﻿/* http://keith-wood.name/realPerson.html
 Real Person Form Submission for jQuery v2.0.1.
 Written by Keith Wood (kwood{at}iinet.com.au) June 2009.
 Available under the MIT (http://keith-wood.name/licence.html) license.
 Please attribute the author if you use it. */

(function($) { // Hide scope, no $ conflict

    var pluginName = 'realperson';

    var ALPHABETIC = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    var ALPHANUMERIC = ALPHABETIC + '0123456789';
    var DOTS = [
        ['   *   ', '  * *  ', '  * *  ', ' *   * ', ' ***** ', '*     *', '*     *'],
        ['****** ', '*     *', '*     *', '****** ', '*     *', '*     *', '****** '],
        [' ***** ', '*     *', '*      ', '*      ', '*      ', '*     *', ' ***** '],
        ['****** ', '*     *', '*     *', '*     *', '*     *', '*     *', '****** '],
        ['*******', '*      ', '*      ', '****   ', '*      ', '*      ', '*******'],
        ['*******', '*      ', '*      ', '****   ', '*      ', '*      ', '*      '],
        [' ***** ', '*     *', '*      ', '*      ', '*   ***', '*     *', ' ***** '],
        ['*     *', '*     *', '*     *', '*******', '*     *', '*     *', '*     *'],
        ['*******', '   *   ', '   *   ', '   *   ', '   *   ', '   *   ', '*******'],
        ['      *', '      *', '      *', '      *', '      *', '*     *', ' ***** '],
        ['*     *', '*   ** ', '* **   ', '**     ', '* **   ', '*   ** ', '*     *'],
        ['*      ', '*      ', '*      ', '*      ', '*      ', '*      ', '*******'],
        ['*     *', '**   **', '* * * *', '*  *  *', '*     *', '*     *', '*     *'],
        ['*     *', '**    *', '* *   *', '*  *  *', '*   * *', '*    **', '*     *'],
        [' ***** ', '*     *', '*     *', '*     *', '*     *', '*     *', ' ***** '],
        ['****** ', '*     *', '*     *', '****** ', '*      ', '*      ', '*      '],
        [' ***** ', '*     *', '*     *', '*     *', '*   * *', '*    * ', ' **** *'],
        ['****** ', '*     *', '*     *', '****** ', '*   *  ', '*    * ', '*     *'],
        [' ***** ', '*     *', '*      ', ' ***** ', '      *', '*     *', ' ***** '],
        ['*******', '   *   ', '   *   ', '   *   ', '   *   ', '   *   ', '   *   '],
        ['*     *', '*     *', '*     *', '*     *', '*     *', '*     *', ' ***** '],
        ['*     *', '*     *', ' *   * ', ' *   * ', '  * *  ', '  * *  ', '   *   '],
        ['*     *', '*     *', '*     *', '*  *  *', '* * * *', '**   **', '*     *'],
        ['*     *', ' *   * ', '  * *  ', '   *   ', '  * *  ', ' *   * ', '*     *'],
        ['*     *', ' *   * ', '  * *  ', '   *   ', '   *   ', '   *   ', '   *   '],
        ['*******', '     * ', '    *  ', '   *   ', '  *    ', ' *     ', '*******'],
        ['  ***  ', ' *   * ', '*   * *', '*  *  *', '* *   *', ' *   * ', '  ***  '],
        ['   *   ', '  **   ', ' * *   ', '   *   ', '   *   ', '   *   ', '*******'],
        [' ***** ', '*     *', '      *', '     * ', '   **  ', ' **    ', '*******'],
        [' ***** ', '*     *', '      *', '    ** ', '      *', '*     *', ' ***** '],
        ['    *  ', '   **  ', '  * *  ', ' *  *  ', '*******', '    *  ', '    *  '],
        ['*******', '*      ', '****** ', '      *', '      *', '*     *', ' ***** '],
        ['  **** ', ' *     ', '*      ', '****** ', '*     *', '*     *', ' ***** '],
        ['*******', '     * ', '    *  ', '   *   ', '  *    ', ' *     ', '*      '],
        [' ***** ', '*     *', '*     *', ' ***** ', '*     *', '*     *', ' ***** '],
        [' ***** ', '*     *', '*     *', ' ******', '      *', '     * ', ' ****  ']];

    /** Create the real person plugin.
     <p>Displays a challenge to confirm that the viewer is a real person.</p>
     <p>Expects HTML like:</p>
     <pre>&lt;input...></pre>
     <p>Provide inline configuration like:</p>
     <pre>&lt;input data-realperson="name: 'value'">...></pre>
     @module RealPerson
     @augments JQPlugin
     @example $(selector).realperson()
     $(selector).realperson({length: 200, toggle: false}) */
    $.JQPlugin.createPlugin({

        /** The name of the plugin. */
        name: pluginName,

        /** The set of alphabetic characters. */
        alphabetic: ALPHABETIC,
        /** The set of alphabetic and numeric characters. */
        alphanumeric: ALPHANUMERIC,
        /** The set dots that make up each character. */
        defaultDots: DOTS,

        /** More/less change callback.
         Triggered when the more/less button is clicked.
         @callback changeCallback
         @param expanding {boolean} True if expanding the text, false if collapsing. */

        /** Default settings for the plugin.
         @property [length=6] {number} Number of characters to use.
         @property [regenerate='Click to change'] {string} Instruction text to regenerate.
         @property [hashName='{n}Hash'] {string} Name of the hash value field to compare with,
         use {n} to substitute with the original field name.
         @property [dot='*'] {string} The character to use for the dot patterns.
         @property [dots=defaultDots] {string[][]} The dot patterns per letter in chars.
         @property [chars=alphabetic] {string} The characters allowed. */
        defaultOptions: {
            length: 6,
            regenerate: 'Click to change',
            hashName: '{n}Hash',
            dot: '*',
            dots: DOTS,
            chars: ALPHABETIC
        },

        _getters: ['getHash'],

        _challengeClass: pluginName + '-challenge',
        _disabledClass: pluginName + '-disabled',
        _hashClass: pluginName + '-hash',
        _regenerateClass: pluginName + '-regen',
        _textClass: pluginName + '-text',

        _optionsChanged: function(elem, inst, options) {
            $.extend(inst.options, options);
            var text = '';
            for (var i = 0; i < inst.options.length; i++) {
                text += inst.options.chars.charAt(Math.floor(Math.random() * inst.options.chars.length));
            }
            inst.hash = hash(text + salt);
            var self = this;
            elem.closest('form').off('.' + inst.name).
            on('submit.' + inst.name, function() {
                var name = inst.options.hashName.replace(/\{n\}/, elem.attr('name'));
                var form = $(this);
                form.find('input[name="' + name + '"]').remove();
                form.append('<input type="hidden" class="' + self._hashClass + '" name="' + name +
                    '" value="' + hash(text + salt) + '">');
                setTimeout(function() {
                    form.find('input[name="' + name + '"]').remove();
                }, 0);
            });
            elem.prevAll('.' + this._challengeClass + ',.' + this._hashClass).remove().end().
            before(this._generateHTML(inst, text)).
            prevAll('div.' + this._challengeClass).click(function() {
                if (!$(this).hasClass(self._disabledClass)) {
                    elem.realperson('option', {});
                }
            });
        },

        /* Enable the plugin functionality for a control.
         @param elem {element} The control to affect. */
        enable: function(elem) {
            elem = $(elem);
            if (!elem.hasClass(this._getMarker())) {
                return;
            }
            elem.removeClass(this._disabledClass).prop('disabled', false).
            prevAll('.' + this._challengeClass).removeClass(this._disabledClass);
        },

        /* Disable the plugin functionality for a control.
         @param elem {element} The control to affect. */
        disable: function(elem) {
            elem = $(elem);
            if (!elem.hasClass(this._getMarker())) {
                return;
            }
            elem.addClass(this._disabledClass).prop('disabled', true).
            prevAll('.' + this._challengeClass).addClass(this._disabledClass);
        },

        /* Retrieve the hash value.
         @param elem {Element} The control with the hash.
         @return {number} The hash value. */
        getHash: function(elem) {
            var inst = this._getInst(elem);
            return inst ? inst.hash : 0;
        },

        /* Generate the additional content for this control.
         @param inst {object} The current instance settings.
         @param text {string} The text to display.
         @return {string} The additional content. */
        _generateHTML: function(inst, text) {
            var html = '<div class="' + this._challengeClass + '">' +
                '<div class="' + this._textClass + '">';
            for (var i = 0; i < inst.options.dots[0].length; i++) {
                for (var j = 0; j < text.length; j++) {
                    html += inst.options.dots[inst.options.chars.indexOf(text.charAt(j))][i].
                        replace(/ /g, '&#160;').replace(/\*/g, inst.options.dot) +
                        '&#160;&#160;';
                }
                html += '<br>';
            }
            html += '</div><div class="' + this._regenerateClass + '">' +
                inst.options.regenerate + '</div></div>';
            return html;
        },

        _preDestroy: function(elem, inst) {
            elem.closest('form').off('.' + inst.name);
            elem.prevAll('.' + this._challengeClass + ',.' + this._hashClass).remove();
        }
    });

    /* Load salt value and clear. */
    var salt = $.salt || '#salt';
    delete $.salt;
    $(function() {
        var saltElem = $(salt);
        if (saltElem.length) {
            salt = saltElem.text();
            saltElem.remove();
        }
        if (salt === '#salt') {
            salt = '';
        }
    });

    /* Compute a hash value for the given text.
     @param value {string} The text to hash.
     @return {number} The corresponding hash value. */
    function utf8_encode ( str_data ) {	// Encodes an ISO-8859-1 string to UTF-8
        //
        // +   original by: Webtoolkit.info (http://www.webtoolkit.info/)

        str_data = str_data.replace(/\r\n/g,"\n");
        var utftext = "";

        for (var n = 0; n < str_data.length; n++) {
            var c = str_data.charCodeAt(n);
            if (c < 128) {
                utftext += String.fromCharCode(c);
            } else if((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            } else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }
        }

        return utftext;
    }


    function md5 ( str ) {	// Calculate the md5 hash of a string
        //
        // +   original by: Webtoolkit.info (http://www.webtoolkit.info/)
        // + namespaced by: Michael White (http://crestidg.com)

        var RotateLeft = function(lValue, iShiftBits) {
            return (lValue<<iShiftBits) | (lValue>>>(32-iShiftBits));
        };

        var AddUnsigned = function(lX,lY) {
            var lX4,lY4,lX8,lY8,lResult;
            lX8 = (lX & 0x80000000);
            lY8 = (lY & 0x80000000);
            lX4 = (lX & 0x40000000);
            lY4 = (lY & 0x40000000);
            lResult = (lX & 0x3FFFFFFF)+(lY & 0x3FFFFFFF);
            if (lX4 & lY4) {
                return (lResult ^ 0x80000000 ^ lX8 ^ lY8);
            }
            if (lX4 | lY4) {
                if (lResult & 0x40000000) {
                    return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);
                } else {
                    return (lResult ^ 0x40000000 ^ lX8 ^ lY8);
                }
            } else {
                return (lResult ^ lX8 ^ lY8);
            }
        };

        var F = function(x,y,z) { return (x & y) | ((~x) & z); };
        var G = function(x,y,z) { return (x & z) | (y & (~z)); };
        var H = function(x,y,z) { return (x ^ y ^ z); };
        var I = function(x,y,z) { return (y ^ (x | (~z))); };

        var FF = function(a,b,c,d,x,s,ac) {
            a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac));
            return AddUnsigned(RotateLeft(a, s), b);
        };

        var GG = function(a,b,c,d,x,s,ac) {
            a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac));
            return AddUnsigned(RotateLeft(a, s), b);
        };

        var HH = function(a,b,c,d,x,s,ac) {
            a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac));
            return AddUnsigned(RotateLeft(a, s), b);
        };

        var II = function(a,b,c,d,x,s,ac) {
            a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac));
            return AddUnsigned(RotateLeft(a, s), b);
        };

        var ConvertToWordArray = function(str) {
            var lWordCount;
            var lMessageLength = str.length;
            var lNumberOfWords_temp1=lMessageLength + 8;
            var lNumberOfWords_temp2=(lNumberOfWords_temp1-(lNumberOfWords_temp1 % 64))/64;
            var lNumberOfWords = (lNumberOfWords_temp2+1)*16;
            var lWordArray=Array(lNumberOfWords-1);
            var lBytePosition = 0;
            var lByteCount = 0;
            while ( lByteCount < lMessageLength ) {
                lWordCount = (lByteCount-(lByteCount % 4))/4;
                lBytePosition = (lByteCount % 4)*8;
                lWordArray[lWordCount] = (lWordArray[lWordCount] | (str.charCodeAt(lByteCount)<<lBytePosition));
                lByteCount++;
            }
            lWordCount = (lByteCount-(lByteCount % 4))/4;
            lBytePosition = (lByteCount % 4)*8;
            lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80<<lBytePosition);
            lWordArray[lNumberOfWords-2] = lMessageLength<<3;
            lWordArray[lNumberOfWords-1] = lMessageLength>>>29;
            return lWordArray;
        };

        var WordToHex = function(lValue) {
            var WordToHexValue="",WordToHexValue_temp="",lByte,lCount;
            for (lCount = 0;lCount<=3;lCount++) {
                lByte = (lValue>>>(lCount*8)) & 255;
                WordToHexValue_temp = "0" + lByte.toString(16);
                WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length-2,2);
            }
            return WordToHexValue;
        };

        var x=Array();
        var k,AA,BB,CC,DD,a,b,c,d;
        var S11=7, S12=12, S13=17, S14=22;
        var S21=5, S22=9 , S23=14, S24=20;
        var S31=4, S32=11, S33=16, S34=23;
        var S41=6, S42=10, S43=15, S44=21;

        str = utf8_encode(str);
        x = ConvertToWordArray(str);
        a = 0x67452301; b = 0xEFCDAB89; c = 0x98BADCFE; d = 0x10325476;

        for (k=0;k<x.length;k+=16) {
            AA=a; BB=b; CC=c; DD=d;
            a=FF(a,b,c,d,x[k+0], S11,0xD76AA478);
            d=FF(d,a,b,c,x[k+1], S12,0xE8C7B756);
            c=FF(c,d,a,b,x[k+2], S13,0x242070DB);
            b=FF(b,c,d,a,x[k+3], S14,0xC1BDCEEE);
            a=FF(a,b,c,d,x[k+4], S11,0xF57C0FAF);
            d=FF(d,a,b,c,x[k+5], S12,0x4787C62A);
            c=FF(c,d,a,b,x[k+6], S13,0xA8304613);
            b=FF(b,c,d,a,x[k+7], S14,0xFD469501);
            a=FF(a,b,c,d,x[k+8], S11,0x698098D8);
            d=FF(d,a,b,c,x[k+9], S12,0x8B44F7AF);
            c=FF(c,d,a,b,x[k+10],S13,0xFFFF5BB1);
            b=FF(b,c,d,a,x[k+11],S14,0x895CD7BE);
            a=FF(a,b,c,d,x[k+12],S11,0x6B901122);
            d=FF(d,a,b,c,x[k+13],S12,0xFD987193);
            c=FF(c,d,a,b,x[k+14],S13,0xA679438E);
            b=FF(b,c,d,a,x[k+15],S14,0x49B40821);
            a=GG(a,b,c,d,x[k+1], S21,0xF61E2562);
            d=GG(d,a,b,c,x[k+6], S22,0xC040B340);
            c=GG(c,d,a,b,x[k+11],S23,0x265E5A51);
            b=GG(b,c,d,a,x[k+0], S24,0xE9B6C7AA);
            a=GG(a,b,c,d,x[k+5], S21,0xD62F105D);
            d=GG(d,a,b,c,x[k+10],S22,0x2441453);
            c=GG(c,d,a,b,x[k+15],S23,0xD8A1E681);
            b=GG(b,c,d,a,x[k+4], S24,0xE7D3FBC8);
            a=GG(a,b,c,d,x[k+9], S21,0x21E1CDE6);
            d=GG(d,a,b,c,x[k+14],S22,0xC33707D6);
            c=GG(c,d,a,b,x[k+3], S23,0xF4D50D87);
            b=GG(b,c,d,a,x[k+8], S24,0x455A14ED);
            a=GG(a,b,c,d,x[k+13],S21,0xA9E3E905);
            d=GG(d,a,b,c,x[k+2], S22,0xFCEFA3F8);
            c=GG(c,d,a,b,x[k+7], S23,0x676F02D9);
            b=GG(b,c,d,a,x[k+12],S24,0x8D2A4C8A);
            a=HH(a,b,c,d,x[k+5], S31,0xFFFA3942);
            d=HH(d,a,b,c,x[k+8], S32,0x8771F681);
            c=HH(c,d,a,b,x[k+11],S33,0x6D9D6122);
            b=HH(b,c,d,a,x[k+14],S34,0xFDE5380C);
            a=HH(a,b,c,d,x[k+1], S31,0xA4BEEA44);
            d=HH(d,a,b,c,x[k+4], S32,0x4BDECFA9);
            c=HH(c,d,a,b,x[k+7], S33,0xF6BB4B60);
            b=HH(b,c,d,a,x[k+10],S34,0xBEBFBC70);
            a=HH(a,b,c,d,x[k+13],S31,0x289B7EC6);
            d=HH(d,a,b,c,x[k+0], S32,0xEAA127FA);
            c=HH(c,d,a,b,x[k+3], S33,0xD4EF3085);
            b=HH(b,c,d,a,x[k+6], S34,0x4881D05);
            a=HH(a,b,c,d,x[k+9], S31,0xD9D4D039);
            d=HH(d,a,b,c,x[k+12],S32,0xE6DB99E5);
            c=HH(c,d,a,b,x[k+15],S33,0x1FA27CF8);
            b=HH(b,c,d,a,x[k+2], S34,0xC4AC5665);
            a=II(a,b,c,d,x[k+0], S41,0xF4292244);
            d=II(d,a,b,c,x[k+7], S42,0x432AFF97);
            c=II(c,d,a,b,x[k+14],S43,0xAB9423A7);
            b=II(b,c,d,a,x[k+5], S44,0xFC93A039);
            a=II(a,b,c,d,x[k+12],S41,0x655B59C3);
            d=II(d,a,b,c,x[k+3], S42,0x8F0CCC92);
            c=II(c,d,a,b,x[k+10],S43,0xFFEFF47D);
            b=II(b,c,d,a,x[k+1], S44,0x85845DD1);
            a=II(a,b,c,d,x[k+8], S41,0x6FA87E4F);
            d=II(d,a,b,c,x[k+15],S42,0xFE2CE6E0);
            c=II(c,d,a,b,x[k+6], S43,0xA3014314);
            b=II(b,c,d,a,x[k+13],S44,0x4E0811A1);
            a=II(a,b,c,d,x[k+4], S41,0xF7537E82);
            d=II(d,a,b,c,x[k+11],S42,0xBD3AF235);
            c=II(c,d,a,b,x[k+2], S43,0x2AD7D2BB);
            b=II(b,c,d,a,x[k+9], S44,0xEB86D391);
            a=AddUnsigned(a,AA);
            b=AddUnsigned(b,BB);
            c=AddUnsigned(c,CC);
            d=AddUnsigned(d,DD);
        }

        var temp = WordToHex(a)+WordToHex(b)+WordToHex(c)+WordToHex(d);

        return temp.toLowerCase();
    }

    function hash(value) {
        var hash = 5381;
        var v = value.toLowerCase();
        for (var i = 0; i < value.length; i++) {
            //hash = ((hash << 5) + hash) + v.charCodeAt(i);
            hash +=  ''+v.charCodeAt(i);
        }
        
        return md5(hash);
    }

})(jQuery);